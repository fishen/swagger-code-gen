/* tslint:disable */
import { {{&config.injection.injectable}}, {{&config.injection.inject}}, {{&config.injection.injector}} } from '{{&config.injection.module}}';
{{#config.imports}}
{{{.}}}
{{/config.imports}}

export type $Select<T, K> = K extends keyof T ? T[K] : T;
export type $Optional<T, K extends keyof any> = Omit<T, K> & {
    [P in Extract<K, keyof T>]?: T[P];
}
export type $Required<T> = {
    [P in keyof T]-?: $Required<T[P]>;
}
export interface IHttp {
    request(options: {
        url: string,
        method: string,
        query?: Record<string, any>,
        body?: Record<string, any>,
        header?: Record<string, any>,
    }): Promise<any>;
}

{{#definitions}}
/**
 * {{{title}}}
 **/
interface {{&type}}{{#genericProperties.length}}<{{#genericProperties}}T{{&.}} = any,{{/genericProperties}}>{{/genericProperties.length}} {
    {{#properties}}
    /**
     * {{{description}}}.{{{originTitle}}}
     {{#default}}
     * @default {{&default}}
     {{/default}}
     {{#deprecated}}
     * @deprecated
     {{/deprecated}}
     **/
    {{&name}}{{^required}}?{{/required}}: {{#generic}}T{{&name}}{{/generic}}{{^generic}}{{&type}}{{/generic}};
    {{/properties}}
}
{{/definitions}}

{{#methods}}
{{#parameters}}
{{#properties.length}}
interface {{&typeName}} {
    {{#properties}}
    /**
     * {{{description}}}
     {{#default}}
     * @default {{&default}}
     {{/default}}
     {{#deprecated}}
     * @deprecated
     {{/deprecated}}
     **/
    {{&name}}{{^required}}?{{/required}}: {{&type}};
    {{/properties}}
}
{{/properties.length}}
{{/parameters}}
{{/methods}}

/**
 * {{{info.title}}}
 * @version {{{info.version}}}
 * @see http://{{&host}}{{&basePath}}swagger-ui.html
 */
{{#config.decorators}}
{{{.}}}
{{/config.decorators}}
@{{&config.injection.injectable}}()
export default class {

    constructor(
        @{{&config.injection.inject}}({{&config.injection.http}}) private http: IHttp
    ) { }

    private getDefaultValue(key: string) {
        try {
            return Injector.get(key);
        } catch (error) {
            console.error(error);
        }
    }

{{#methods}}
    /**
     * {{{summary}}}
     {{#deprecated}}
     * @deprecated
     {{/deprecated}}
     */
    {{{name}}}({{#parameters}}{{{name}}}: {{&type}}, {{/parameters}}): Promise<{{{response}}}> {
        {{#defaults}}
        if ({{{in}}}['{{{name}}}'] === undefined) {
            {{{in}}}['{{{name}}}'] = this.getDefaultValue('{{{name}}}');
        }
        {{/defaults}}
        return this.http.request({ url: "{{&url}}", method: "{{&method}}", {{#parameters}}{{{name}}}, {{/parameters}}});
    }

{{/methods}}
}