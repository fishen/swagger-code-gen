/* tslint:disable */
import { {{&config.injection.injectable}}, {{&config.injection.inject}}, {{&config.injection.injector}} } from '{{&config.injection.module}}';
{{#config.imports}}
{{{.}}}
{{/config.imports}}

export type $Select<T, K> = K extends keyof T ? T[K] : T;
export type $Optional<T, K extends keyof any> = Omit<T, K> & {
    [P in Extract<K, keyof T>]?: T[P];
}
export type $Required<T> = {
    [P in keyof T]-?: $Required<T[P]>;
}
export interface IHttp {
    /**
     * Make a HTTP request operation.
     * @param options The parameters required by the request.
     */
    request(options: {
        url: string,
        method: string,
        query?: Record<string, any>,
        body?: Record<string, any>,
        header?: Record<string, any>,
    }): Promise<any>;

    /**
     * Get the default value
     * @param name The param name
     * @param from The param source 'query','body','header'.
     * @param url The api url string.
     */
    getDefaultValue?(name: string, from: string, url: string): any;
}

{{#definitions}}
/**
 * {{{title}}}
 **/
interface {{&type}}{{#genericProperties.length}}<{{#genericProperties}}T{{&.}} = any,{{/genericProperties}}>{{/genericProperties.length}} {
    {{#properties}}
    /**
     * {{{description}}}.{{{originTitle}}}
     {{#default}}
     * @default {{&default}}
     {{/default}}
     {{#deprecated}}
     * @deprecated
     {{/deprecated}}
     **/
    {{&name}}{{^required}}?{{/required}}: {{#generic}}T{{&name}}{{/generic}}{{^generic}}{{&type}}{{/generic}};
    {{/properties}}
}
{{/definitions}}

{{#methods}}
{{#parameters}}
{{^referenced}}
{{#properties.length}}
interface {{&typeName}} {
    {{#properties}}
    /**
     * {{{description}}}
     {{#default}}
     * @default {{&default}}
     {{/default}}
     {{#deprecated}}
     * @deprecated
     {{/deprecated}}
     **/
    {{&name}}{{^required}}?{{/required}}: {{&type}};
    {{/properties}}
}
{{/properties.length}}
{{/referenced}}
{{/parameters}}
{{/methods}}

/**
 * {{{info.title}}}
 * @version {{{info.version}}}
 * @see http://{{&host}}{{&basePath}}swagger-ui.html
 */
{{#config.decorators}}
{{{.}}}
{{/config.decorators}}
@{{&config.injection.injectable}}()
export default class {

    constructor(
        @{{&config.injection.inject}}({{&config.injection.http}}) private http: IHttp
    ) { }
{{#methods}}

    /**
     * {{{summary}}}
     {{#deprecated}}
     * @deprecated
     {{/deprecated}}
     */
    {{{name}}}({{#parameters}}{{{name}}}{{^required}}?{{/required}}: {{&type}}, {{/parameters}}): Promise<{{{response}}}> {
        const url = "{{{url}}}";
        {{#defaults.length}}
        if (this.http.getDefaultValue) {
            {{#defaults}}
            {{{key}}} = Object.assign({
                {{#value}}
                {{{.}}}: this.http.getDefaultValue('{{{.}}}', '{{{key}}}', url),
                {{/value}}
            }, {{{key}}})
            {{/defaults}}
        }
        {{/defaults.length}}
        return this.http.request({ url, method: "{{&method}}", {{#parameters}}{{{name}}}, {{/parameters}}});
    }
{{/methods}}
}