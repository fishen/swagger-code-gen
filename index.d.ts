// Generated by "bundle-dts@1.1.3" https://github.com/fishen/bundle-dts#readme."
declare module "swagger-code-gen/src/config" {
    export interface IConfig {
        injection?: Record<string, string>;
        destination?: string;
        defaults?: Partial<Record<'body' | 'header' | 'query', string[]>>;
        rename?: Partial<Record<'method' | 'parameterType' | 'responseType', (...args: any) => string>>;
        templates?: Partial<Record<'type' | 'index', string>>;
        ignores?: Partial<Record<'definitions' | 'body' | 'header' | 'query', string[]>>;
        imports?: Record<string, string>;
        filename?: (args: {
            name: string;
        }) => string;
        classname?: (args: {
            name: string;
        }) => string;
        name?: string;
        source?: string;
        systemGenericTypes?: string[];
        typeMappings?: Record<string, string>;
    }
    export const defaultConfig: IConfig;
}
declare module "swagger-code-gen/src/swagger" {
    export interface ISwaggerInfo {
        version: string;
        title: string;
    }
    export interface ISwaggerDefinitionProperty {
        example?: string;
        format?: string;
        description?: string;
        type?: string;
        $ref?: string;
        items?: ISwaggerDefinitionProperty;
    }
    export interface ISwaggerDefinition {
        properties: Record<string, ISwaggerDefinitionProperty>;
        required?: string[];
        type: string;
    }
    export interface ISwaggerPathParameter {
        default: any;
        description: string;
        in: 'header' | 'body' | 'query';
        name: string;
        required: boolean;
        type: string;
    }
    export interface ISwaggerPathResponse {
        description: string;
        schema?: ISwaggerDefinitionProperty;
    }
    export interface ISwaggerPath {
        consumes: string[];
        operationId: string;
        parameters: ISwaggerPathParameter[];
        produces: string[];
        responses: Record<number, ISwaggerPathResponse>;
        summary: string;
        tags: string[];
        deprecated?: boolean;
    }
    export interface ISwaggerTag {
        name: string;
        description: string;
    }
    export interface ISwagger {
        basePath: string;
        definitions: Record<string, ISwaggerDefinition>;
        host: string;
        info: ISwaggerInfo;
        paths: Record<string, Record<string, ISwaggerPath>>;
        swagger: string;
        tags: ISwaggerTag[];
    }
}
declare module "swagger-code-gen/src/property" {
    import { ISwaggerDefinitionProperty } from 'swagger-code-gen/src/swagger';
    import { IConfig } from 'swagger-code-gen/src/config';
    export class Property {
        name: string;
        type: string;
        description: string;
        default: any;
        deprecated: boolean;
        required: boolean;
        generic: boolean;
        otherType: boolean;
        constructor(data: ISwaggerDefinitionProperty & {
            name: string;
        }, config: IConfig);
    }
}
declare module "swagger-code-gen/src/definition" {
    import { Property } from 'swagger-code-gen/src/property';
    import { IConfig } from 'swagger-code-gen/src/config';
    import { ISwagger, ISwaggerDefinition } from 'swagger-code-gen/src/swagger';
    export class Definition {
        title: string;
        type: string;
        generic: boolean;
        name: string;
        basePath: string;
        host: string;
        properties?: Property[];
        genericProperties?: string[];
        constructor(data: ISwaggerDefinition & {
            title: string;
        }, config: IConfig);
        static parse(swagger: ISwagger, config: IConfig): Definition[];
    }
}
declare module "swagger-code-gen/src/param" {
    import { Property } from 'swagger-code-gen/src/property';
    import { Method } from 'swagger-code-gen/src/method';
    import { IConfig } from 'swagger-code-gen/src/config';
    import { ISwaggerPathParameter } from 'swagger-code-gen/src/swagger';
    export class Param {
        name: string;
        type: string;
        properties: Property[];
        constructor(data: {
            name: string;
            type: string;
            properties?: Property[];
        });
        static from(method: Method, params: ISwaggerPathParameter[], config: IConfig): Param[];
    }
}
declare module "swagger-code-gen/src/method" {
    import { Param } from 'swagger-code-gen/src/param';
    import { IConfig } from 'swagger-code-gen/src/config';
    import { ISwagger, ISwaggerPath } from 'swagger-code-gen/src/swagger';
    export class Method {
        method: string;
        path: string;
        url: string;
        deprecated: boolean;
        operationId: string;
        summary: string;
        tags: string[];
        name: string;
        parameters: Param[];
        response: string;
        constructor(data: ISwaggerPath & {
            path: string;
            method: string;
        }, config: IConfig, swagger: ISwagger);
        static parse(swagger: ISwagger, config: IConfig): any[];
    }
}
declare module "swagger-code-gen/src/generator" {
    import { IConfig } from 'swagger-code-gen/src/config';
    export class Generator {
        genericTypes: Map<any, any>;
        config: IConfig;
        constructor(config: IConfig);
        static render(view: object, template: string, filename: string, config: IConfig): any;
        static getType(a: {
            type?: string;
            $ref?: string;
            items?: object;
            schema?: object;
        }, config: IConfig): string;
        generate(): Promise<any>;
    }
}
declare module "swagger-code-gen/src/http" {
    export interface IHttp {
        request(options: {
            url: string;
            method: string;
            query?: Record<string, any>;
            body?: Record<string, any>;
            header?: Record<string, any>;
        }): Promise<any>;
    }
}
declare module "swagger-code-gen" {
    import { IHttp } from 'swagger-code-gen/src/http';
    import { IConfig } from 'swagger-code-gen/src/config';
    export function generate(config: Record<string, IConfig>): Promise<any>;
    export type { IConfig, IHttp };
}